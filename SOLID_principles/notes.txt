[S]ingle responsibility
[O]pen / closed
[L]iskov principle
[D]dependency inversion


Single responsibility:
classes and methods to have high cohesion, 
only do one thing. so that one thing can be reused much easer. 


class orders:
    add item() - part of order
    total_price() - part of order --> makes sense
    pay() --> part of the end of order but 
    if more payment methods come, it'll be cumborsome.
    and Orders class already have way too many responsibility. 
    so seperate payment into a different class 

    split pay() into two methods pay debit and pay credit 

now both classes and methods have Single functionality.  
---------

Open / closed
Write code thats open for extension, to be able to extend existing code with new functionality 
closed for modification, not to modify existing code in order to extend functionality

adding bitcoin payment methods will change payment class since we have to 
add a new method, which changes/modifies the existing code. 

so create an  abstract base class (payment handler) and diff classes for diff payment method 
inheriting from bluprint for abstract base class

-------




