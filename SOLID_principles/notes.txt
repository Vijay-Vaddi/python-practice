[S]ingle responsibility
[O]pen / closed
[L]iskov principle
[D]dependency inversion


**** Single responsibilit ****

classes and methods to have high cohesion, 
only do one thing. so that one thing can be reused much easer. 

class orders:
    add item() - part of order
    total_price() - part of order --> makes sense
    pay() --> part of the end of order but 
    if more payment methods come, it'll be cumborsome.
    and Orders class already have way too many responsibility. 
    so seperate payment into a different class 

    split pay() into two methods pay debit and pay credit 

now both classes and methods have Single functionality.  

---------

****Open / closed****

Write code thats open for extension, to be able to extend existing code with new functionality 
closed for modification, not to modify existing code in order to extend functionality

adding bitcoin payment methods will change payment class since we have to 
add a new method, which changes/modifies the existing code. 

so create an  abstract base class (payment handler) and diff classes for diff payment method 
inheriting from bluprint for abstract base class

-------

****Liskov substitution****

if you've objects in programs, you should be able to replace
those objects with instances of their subtypes or subclasses without altering the correctness of the program. 

in the given example, 
the paypayl or bitcoin may use email instead of security code.  

can pass email as string since security code is also string but, 
we've abusing the bluprint of abstract method to do something different. 

so we change the base class's method in a way that, 
secutiry code is removed from abstract method and setting it as a initializer/attribute of the sub payment classes

--------
when you replace an instance of a superclass with an instance of its subclass, not only should the program should still work
without errors, but it should also behave logically and maintain coherence.

The key point is that substituting a subclass instance for a superclass instance should not cause unexpected behavior or 
violate the intended meaning and logic of the program. 
It's about ensuring that the program behaves in a predictable and consistent manner, 
even when dealing with different types of objects.

-------

**** Interface segregation ****

Its better to have several specific interfaces than one general purpose interface. 
in the basic example, using verified attribute to set sms code verification to True/false
and auth_sms() in ABC to verifiy that and set verified to True. 

adding this to all payment type but credit card doesnt have sms verification system. 
- also add if verified to check if payment is verified or raise exception. 

The issue is credit card system does not have sms verification 

So general interface like Paymenthander( ) to process payment/2FA verificat for all, does not work. 
so add diff subclass of Paymenthander() Paymenthander_sms() to handle 2FA

so this split creates better interfaces. 

-- instead of using classes and subclasses, can do using Composition





