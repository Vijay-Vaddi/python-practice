Big O and scalability, graph explanation:
---------
Definition:
When we grow bigger in input quantity (elements), how much does the algorithm slow down. 

Elements vs Operations. 
If Elements increases, how many more operations do we have to do? 
This is called algorithmic efficiency.
--------
O(n) : Linear time. as elements increase operations time increases. 
Big o depends on the numbers of inputs(n) linearaly. 

Big O doesnt measure time, but how quicky the run time grows. change in run time. 
----------

O(1) : Constant time, flat line. 
Inputs can be any type of data. 

Irrespective of inputs, the number of operations is same.  
Not necessarily 1 operation but constant time.  

#########################################################
#########################################################

Rules of calculating Big O.
1. Always consider the worst case scenario. 
2. Remove the constants
---- O(1 + n/2 + 1000) --> O(n)
since constants dont matter once the data is large enough. 
O(n+n) O(2n) (since this still linear) --> O(n) 
Only if the n and n are same. for example function with two loops interating over n. 


3. Different terms for inputs (m,n) 
if m and n are Different for loops, 
O(m+n)

# for nested loops 
# O(m*n) --> n^2 (n sqaured) if m==n. 
# O(n^2) --> This is called quadratic time. 

Common interview questions is to turn a func of O(n^2) to a better one. 

4. Drop non dominants 
O( n + n^2) --> drop n --> O(n^2)
O(n^2 + 3x + 100 + n/2) --> O(n^2)

######################################################
######################################################

Checkout
https://www.bigocheatsheet.com/

#############################

O(n!)
Adding a loop for every element. 

#############################

Readable 
Scalable : Speed, Memory

#############################

Space complexity

When a program executes, it has two ways to remember things, heap and stack. 
Heap - usually where we store variable that we assign
Stack is where we usually keep our function calls

What causes space complexity?
variables
data structures
function call
allocations

Similar to time. 

Premature optimization can be the root of all evil(saying among developers)
Maybe time in more important than space, it depends on the circumstances. 

Ultimately it depends on the scale and size of the data thats being operated on. 

###############################
What companies looking for. 

1. Analytical skills, how can we think through a problem and analyse things. 
Thought process, from not knowing the answer to solving the problem. 

2. Coding skills, clena, organized and readable. 

3. Tech skill, knowledge 
Knowing fundamentals, understanding things. No memorization. 

4. Communication skills
Personality match, team match. Type fit. 

=============

When solving interview exercise. 

#dont jump into solving the problem or coding.

1. Write down the key points at the top, 
    all the key points, ip/op, 
    edge cases, (if needed) 
    in a organized manner. 

2. Double check 
    what are the inputs, and outputs 

3. what is the main goal of the problem. 
    do we have the time/space to run it?
    ask if time or space complexity is more important

4. dont ask too many questions.  

5. start with Brute force. 
    easiest method.
    No need to code.
    just speak about it.  

6. speak how Brute force not best solution.   
    possiblity of O(m*n) can be O(m+n) or better.  

7. walk through approach, comment things 
    see where you can break things for better
    any repetition, bottlenecks or unnecessary stuff to rid off.
    used all the info given?  

8. walk through the code and
    write down the steps to follow
    // like loop through one array 
            do something 
    // loops through another, 
            check condition
                and do soemthing else.  

9. break code into small sections/pieces

10. start writing code, 
    dont start white board coding/coding until all is known. 
    if cant remember syntax/method, just make it up. 
    logic needs to be good. 
    start with easy part. 

11. Try to break the code,
    check all possible inputs, 
    see how it might break
    what would change and if so what changes to/could be made

    offer possible solutions verbally is possible. 


12. dont use i,j (except for loops maybe) for naming variable/functions. 
    write more readable code. 

check how to improve code, 
    what we can google,
    search and work on,
    maybe something language specific 
        which can make code more efficient, readable. etc 

# check about space complexity and talk how much it takes. 
    if space complexity is less/more efficient than time. 

# modularize code and add comments. 
    talk about how you can split the code into separate functions. 
    for better readability. 

#demonstrate to interviewr your thought process and 
    have the thinking capability of an engineer. 

# dont into the idea of solving the problem on time but process of arriving at the solution. 

============================

Data structures: Intro

Each container is best used for a specific thing. 
Like putting food in fridge, papers in files. 
Best use and best access to make things efficient and convenient. 

One is better than the other in some aspects and vice versa. 

Computers, cpu accessing info from ram through memory manager, 
    its faster to access memories which are closer to each other when jumping ramdomly, (RAM)
    (due to wiring?) address 0 to 1 is faster than address 0 - 10000 even if access is direct and not one by one. 

    CPUs closest memory, LRU cache. Least recently used.

Data structure is an arrangement of data in the memory, (RAM when it comes down to it)
    its distribution, linear, random,
    how its linked and works with memory manager or how easy it can be accessed depends on defining data structure
    ***
    making it easy for cpu to access/write this data faster/easier/less in the memory is our job.  
    ***
    some have Different pros and cons on access and writing. 

Some languages have their in built data structures, some have to be built. 

Operations on data structures
    insertion
    deletion
    traversal
    access
    sorting
    searching









